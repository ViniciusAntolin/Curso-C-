Primeira Forma Normal (1NF):
    A primeira forma normal define que cada valor em uma tabela deve ser atômico, ou seja, não deve ser divisível em partes menores. Isso significa que cada coluna de uma tabela deve conter apenas valores individuais, e não múltiplos valores combinados. Por exemplo, se tivermos uma tabela de clientes, cada coluna deve conter apenas um valor específico, como nome, endereço, telefone, e assim por diante. Se houver informações compostas, como vários números de telefone para um cliente, é necessário criar uma nova tabela relacionada para armazenar esses valores múltiplos.
    Além disso, cada tabela deve ter uma chave primária única. A chave primária é um atributo ou um conjunto de atributos que identifica de forma única cada registro na tabela. Ela garante que não haja duplicação de dados e permite a identificação precisa de registros individuais.

Segunda Forma Normal (2NF):
    A segunda forma normal estabelece que uma tabela deve estar na primeira forma normal e, além disso, todos os atributos não-chave devem depender totalmente da chave primária. Isso significa que cada coluna em uma tabela deve ser diretamente dependente da chave primária, e não de parte dela.
    Por exemplo, suponha que temos uma tabela de pedidos com as seguintes colunas: número do pedido, código do produto, nome do produto, quantidade do produto e preço unitário. A chave primária é o número do pedido. Nesse caso, o nome do produto, a quantidade e o preço unitário dependem diretamente da chave primária, pois cada um deles está associado a um número de pedido específico. No entanto, o código do produto não está diretamente relacionado à chave primária; ele está relacionado ao nome do produto. Para atender à segunda forma normal, devemos separar essas informações em duas tabelas diferentes: uma tabela de pedidos e outra tabela de produtos, onde o código do produto estará relacionado ao nome do produto.

Terceira Forma Normal (3NF):
    A terceira forma normal estabelece que uma tabela deve estar na segunda forma normal e, adicionalmente, não deve conter dependências transitivas. Isso significa que os atributos não-chave de uma tabela devem depender apenas da chave primária, e não de outros atributos não-chave.
    Por exemplo, considerando a tabela de pedidos mencionada anteriormente, suponha que além do nome do produto, também tenhamos o nome do fabricante na mesma tabela. Nesse caso, o nome do fabricante não depende diretamente da chave primária (número do pedido), mas sim do nome do produto. Para atender à terceira forma normal, devemos criar uma nova tabela de fabricantes, onde o nome do fabricante será a chave primária, e a tabela de pedidos fará referência ao fabricante por meio dessa chave primária, evitando assim a dependência transitiva.

    Essas três formas normais são utilizadas para garantir a organização eficiente dos dados em um banco de dados relacional, minimizando a redundância e assegurando a integridade dos dados.